#!/bin/bash

#TODO: add permissions checking
#TODO: add support for filenames with spaces in them
#TODO: fix parsing to execute trash/restore after other options 
# are processed (e.g. --quiet after a restore doesn't suppress info msgs);

GB_BASE_DIR="${HOME}/.gb"
GB_TRASH_DIR="${GB_BASE_DIR}/trash"
GB_LOGFILE="${GB_BASE_DIR}/gb.log"

mkdir -p $GB_TRASH_DIR
touch $GB_LOGFILE

# error: 	3
# warning: 	4
# info: 	6
# debug: 	7
LOG_LEVEL=6

function echo_debug {
	if [ $LOG_LEVEL -ge 7 ]; then
		echo $1
	fi
}

function echo_info {
	if [ $LOG_LEVEL -ge 6 ]; then
		echo $1
	fi
}

function echo_error {
	if [ $LOG_LEVEL -ge 3 ]; then
		echo "Error: $1"
	fi
}

function print_log {

	if [ ! -s $GB_LOGFILE ]; then
		return 1
	fi

	if [ -n "$1" ];
	then
		tail -n $1 $GB_LOGFILE
	else
		cat $GB_LOGFILE
	fi
}

function trash_single_file {

	if [ ! -e $1 ];
	then
		echo_error "file or folder \"$1\" could not be found"
		exit 1
	fi

	if [ -d $1 ]; then
		echo_debug "trashing directory '$1'"
	elif [ -f $1 ]; then
		echo_debug "trashing file '$1'"
	fi

	TARGET_FILE="$(realpath $1)"

	while true;
	do
		GB_FILE_HASH="$(echo \"$TARGET_FILE$RANDOM\" | md5sum | awk '{print $1}')"

		if [ -z $(cat $GB_LOGFILE | grep $GB_FILE_HASH) ]; then
			break
		fi
	done

	echo "$GB_FILE_HASH $(date +%s) $(whoami) $TARGET_FILE" >> "${GB_LOGFILE}"

	mv $TARGET_FILE "${GB_TRASH_DIR}/${GB_FILE_HASH}"
}

function restore_single_file {
	# find file hash

	echo_info "searching for file '$1'"

	# FIXME: this will search the whole line of the log, not
	# just the filename
	SCAN="$(cat $GB_LOGFILE | grep --color=none $(echo $1))"
	SCAN_LC="$(echo "$SCAN" | wc -l)"

	if [ -z "$SCAN" ];
	then
		echo_error "no files matched argument"
		return 1
	fi

	IFS=$'\n' read -d '' -r -a TARGET_LINES <<< "$SCAN"
	select LINE in "${TARGET_LINES[@]}"; do
		TARGET="$LINE"
		break
	done

	if [ -z "$TARGET" ];
	then 
		echo_error "invalid option"
		return 1
	fi

	TARGET_HASH="$(echo "$TARGET" | awk '{print $1}')"

	DEST_FILENAME="$(echo "$TARGET" | awk '{print $4}')"
	echo_debug "target: $TARGET"
	echo_debug "found hash and file: "
	echo_debug "hash: $TARGET_HASH"
	echo_debug "file: $DEST_FILENAME"

	if [ ! -d "$(dirname $DEST_FILENAME)" ]; then
		echo_error "directory for trashed file $DEST_FILENAME does not exist"
		return 1
	fi

	if [ -e "$DEST_FILENAME" ]; then
		echo_error "$DEST_FILENAME already exists, exiting"
		return 1
	fi

	echo_debug "moving ${GB_TRASH_DIR}/${TARGET_HASH} to ${DEST_FILENAME}"
	mv "${GB_TRASH_DIR}/${TARGET_HASH}" "${DEST_FILENAME}"
	sed -i '/'"$TARGET_HASH"'/d' $GB_LOGFILE
}

function empty_trash {
	rm -r $GB_TRASH_DIR && mkdir -p $GB_TRASH_DIR
	rm $GB_LOGFILE && touch $GB_LOGFILE
	echo_info "emptied trash."
}

########################################
###### MAIN ARGUMENT HANDLING ##########
########################################

if [ "$#" -eq 0 ];
then
	echo "garbage v0.1"
	echo "--help for more info"
	exit 1
fi

while [ "$#" -gt 0 ]; do
#	echo "current arg with $# args left: $1"
	case $1 in
		-l|--list)
			case $2 in
				'')
					print_log
					exit 0
					;;
				*![0-9]*)
					echo_error "invalid list print length"
					exit 1
					;;
				*)
					print_log $2
					exit 0
			esac
			;;
		-h|--help)
			# TODO: implement
			echo "not implemented"
			exit 1
			;;
		-c|--config)
			# TODO: adtl args to set config options
			echo "gb directory:   $GB_BASE_DIR"
			echo "gb trash:       $GB_TRASH_DIR"
			echo "gb log:         $GB_LOGFILE"
			exit 0
			;;
		--debug)
			LOG_LEVEL=7
			;;
		--quiet)
			# set log level to ERROR 
			LOG_LEVEL=3
			;;
		--empty)
			read -p "Are you absolutely positively sure? (y/n) " -n 1 -r
			case "$REPLY" in
				y|Y|yes)
					echo ""
					# TODO: add a 3sec countdown with a sigint handler to give
					# user time to think
					empty_trash
					exit 0
					;;
				*)
					exit 1
					;;
			esac
			;;
		-r|--restore)
			restore_single_file $2
			shift
		#	shift
			;;
		*)
			if [ -n $1 ];
			then
				trash_single_file $1
			fi
		#	shift
			;;
	esac
	shift
done

exit 0
